//-----------------------------------------------------------------------------
// File : Mesh.h
// Desc : Mesh Drawer Module.
// Copyright(c) Pocol. All right reserved.
//-----------------------------------------------------------------------------
#pragma once

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <ResMesh.h>
#include <VertexBuffer.h>
#include <IndexBuffer.h>
#include <StructuredBuffer.h>


///////////////////////////////////////////////////////////////////////////////
// MeshDescriptorEntry structure
///////////////////////////////////////////////////////////////////////////////
struct MeshDescriptorEntry
{
    uint32_t ParamIndex;
    bool     DescriptorTable;
};

///////////////////////////////////////////////////////////////////////////////
// MeshDescriptorSetting structure
///////////////////////////////////////////////////////////////////////////////
struct MeshDescriptorSetting
{
    MeshDescriptorEntry Vertices;
    MeshDescriptorEntry UniqueVertexIndices;
    MeshDescriptorEntry PrimitiveIndices;
    MeshDescriptorEntry Meshlets;
};


///////////////////////////////////////////////////////////////////////////////
// Mesh class
///////////////////////////////////////////////////////////////////////////////
class Mesh
{
    //=========================================================================
    // list of friend classes and methods.
    //=========================================================================
    /* NOTHING */

public:
    //=========================================================================
    // public variables.
    //=========================================================================
    /* NOTHING */

    //=========================================================================
    // public methods.
    //=========================================================================

    //-------------------------------------------------------------------------
    //! @brief      コンストラクタです.
    //-------------------------------------------------------------------------
    Mesh();

    //-------------------------------------------------------------------------
    //! @brief      デストラクタです.
    //-------------------------------------------------------------------------
    virtual ~Mesh();

    //-------------------------------------------------------------------------
    //! @brief      グラフィックスパイプラインとして初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      resource        リソースメッシュです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(ID3D12Device* pDevice, const ResMesh& resource);

    //-------------------------------------------------------------------------
    //! @brief      メッシュシェーダパイプラインとして初期化処理を行います.
    //!
    //! @param[in]      pDevice         デバイスです.
    //! @param[in]      pPool           ディスクリプタプールです.
    //! @param[in]      resource        リソースメッシュです.
    //! @param[out]     batch           更新バッチです.
    //! @retval true    初期化に成功.
    //! @retval false   初期化に失敗.
    //-------------------------------------------------------------------------
    bool Init(
        ID3D12Device*                   pDevice,
        DescriptorPool*                 pPool,
        const ResMesh&                  resource,
        DirectX::ResourceUploadBatch&   batch);

    //-------------------------------------------------------------------------
    //! @brief      終了処理を行います.
    //-------------------------------------------------------------------------
    void Term();

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //!
    //! @param[in]      pCmdList        コマンドリストです.
    //-------------------------------------------------------------------------
    void Draw(ID3D12GraphicsCommandList* pCmdList);

    //-------------------------------------------------------------------------
    //! @brief      マテリアルIDを取得します.
    //!
    //! @return     マテリアルIDを返却します.
    //-------------------------------------------------------------------------
    uint32_t GetMaterialId() const;

    //-------------------------------------------------------------------------
    //! @brief      描画処理を行います.
    //!
    //! @param[in]      pCmdList        コマンドリストです.
    //! @param[in]      settings        ディスクリプタ設定です.
    //-------------------------------------------------------------------------
    void Dispatch(
        ID3D12GraphicsCommandList6*     pCmdList,
        const MeshDescriptorSetting&    setting);

private:
    //=========================================================================
    // private variables.
    //=========================================================================
    VertexBuffer    m_VB;               //!< 頂点バッファです.
    IndexBuffer     m_IB;               //!< インデックスバッファです.
    uint32_t        m_MaterialId;       //!< マテリアルIDです.
    uint32_t        m_IndexCount;       //!< インデックス数です.

    StructuredBuffer    m_Vertices;             //!< 頂点バッファです.
    StructuredBuffer    m_UniqueVertexIndices;  //!< ユニーク頂点インデックスバッファです.
    StructuredBuffer    m_PrimitiveIndices;     //!< プリミティブインデックスバッファです.
    StructuredBuffer    m_Meshlests;            //!< メッシュレットです.
    uint32_t            m_MeshlsetCount;        //!< メッシュレット数です.

    //=========================================================================
    // private methods.
    //=========================================================================
    Mesh            (const Mesh&) = delete;     // アクセス禁止.
    void operator = (const Mesh&) = delete;     // アクセス禁止.
};